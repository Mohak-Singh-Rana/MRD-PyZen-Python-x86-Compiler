Starting parse
Entering state 0
Stack now 0
Reading a token
Next token is token WHILE ()
Shifting token WHILE ()
Entering state 5
Stack now 0 5
Reducing stack by rule 1 (line 133):
-> $$ = nterm M ()
Entering state 62
Stack now 0 5 62
Reading a token
Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 17
Stack now 0 5 62 17
Reading a token
Next token is token NAME ()
Shifting token NAME ()
Entering state 3
Stack now 0 5 62 17 3
Reducing stack by rule 118 (line 623):
   $1 = token NAME ()
-> $$ = nterm atom ()
Entering state 57
Stack now 0 5 62 17 57
Reducing stack by rule 110 (line 596):
   $1 = nterm atom ()
-> $$ = nterm atom_expr ()
Entering state 56
Stack now 0 5 62 17 56
Reading a token
Next token is token LESS_THAN ()
Reducing stack by rule 108 (line 587):
   $1 = nterm atom_expr ()
-> $$ = nterm power ()
Entering state 55
Stack now 0 5 62 17 55
Reducing stack by rule 104 (line 572):
   $1 = nterm power ()
-> $$ = nterm factor ()
Entering state 53
Stack now 0 5 62 17 53
Reducing stack by rule 96 (line 543):
   $1 = nterm factor ()
-> $$ = nterm term ()
Entering state 52
Stack now 0 5 62 17 52
Next token is token LESS_THAN ()
Reducing stack by rule 93 (line 532):
   $1 = nterm term ()
-> $$ = nterm arith_expr ()
Entering state 51
Stack now 0 5 62 17 51
Next token is token LESS_THAN ()
Reducing stack by rule 91 (line 523):
   $1 = nterm arith_expr ()
-> $$ = nterm shift_expr ()
Entering state 50
Stack now 0 5 62 17 50
Next token is token LESS_THAN ()
Reducing stack by rule 89 (line 514):
   $1 = nterm shift_expr ()
-> $$ = nterm and_expr ()
Entering state 49
Stack now 0 5 62 17 49
Next token is token LESS_THAN ()
Reducing stack by rule 87 (line 506):
   $1 = nterm and_expr ()
-> $$ = nterm xor_expr ()
Entering state 48
Stack now 0 5 62 17 48
Next token is token LESS_THAN ()
Reducing stack by rule 85 (line 498):
   $1 = nterm xor_expr ()
-> $$ = nterm expr ()
Entering state 47
Stack now 0 5 62 17 47
Next token is token LESS_THAN ()
Shifting token LESS_THAN ()
Entering state 90
Stack now 0 5 62 17 47 90
Reducing stack by rule 74 (line 463):
   $1 = token LESS_THAN ()
-> $$ = nterm comp_op ()
Entering state 98
Stack now 0 5 62 17 47 98
Reading a token
Next token is token NAME ()
Shifting token NAME ()
Entering state 3
Stack now 0 5 62 17 47 98 3
Reducing stack by rule 118 (line 623):
   $1 = token NAME ()
-> $$ = nterm atom ()
Entering state 57
Stack now 0 5 62 17 47 98 57
Reducing stack by rule 110 (line 596):
   $1 = nterm atom ()
-> $$ = nterm atom_expr ()
Entering state 56
Stack now 0 5 62 17 47 98 56
Reading a token
Next token is token CLOSE_BRACKET ()
Reducing stack by rule 108 (line 587):
   $1 = nterm atom_expr ()
-> $$ = nterm power ()
Entering state 55
Stack now 0 5 62 17 47 98 55
Reducing stack by rule 104 (line 572):
   $1 = nterm power ()
-> $$ = nterm factor ()
Entering state 53
Stack now 0 5 62 17 47 98 53
Reducing stack by rule 96 (line 543):
   $1 = nterm factor ()
-> $$ = nterm term ()
Entering state 52
Stack now 0 5 62 17 47 98 52
Next token is token CLOSE_BRACKET ()
Reducing stack by rule 93 (line 532):
   $1 = nterm term ()
-> $$ = nterm arith_expr ()
Entering state 51
Stack now 0 5 62 17 47 98 51
Next token is token CLOSE_BRACKET ()
Reducing stack by rule 91 (line 523):
   $1 = nterm arith_expr ()
-> $$ = nterm shift_expr ()
Entering state 50
Stack now 0 5 62 17 47 98 50
Next token is token CLOSE_BRACKET ()
Reducing stack by rule 89 (line 514):
   $1 = nterm shift_expr ()
-> $$ = nterm and_expr ()
Entering state 49
Stack now 0 5 62 17 47 98 49
Next token is token CLOSE_BRACKET ()
Reducing stack by rule 87 (line 506):
   $1 = nterm and_expr ()
-> $$ = nterm xor_expr ()
Entering state 48
Stack now 0 5 62 17 47 98 48
Next token is token CLOSE_BRACKET ()
Reducing stack by rule 85 (line 498):
   $1 = nterm xor_expr ()
-> $$ = nterm expr ()
Entering state 47
Stack now 0 5 62 17 47 98 47
Next token is token CLOSE_BRACKET ()
Reducing stack by rule 72 (line 448):
   $1 = nterm expr ()
-> $$ = nterm comparison ()
Entering state 137
Stack now 0 5 62 17 47 98 137
Reducing stack by rule 73 (line 451):
   $1 = nterm expr ()
   $2 = nterm comp_op ()
   $3 = nterm comparison ()
-> $$ = nterm comparison ()
Entering state 46
Stack now 0 5 62 17 46
Reducing stack by rule 71 (line 442):
   $1 = nterm comparison ()
-> $$ = nterm not_test ()
Entering state 45
Stack now 0 5 62 17 45
Next token is token CLOSE_BRACKET ()
Reducing stack by rule 66 (line 424):
   $1 = nterm not_test ()
-> $$ = nterm and_test ()
Entering state 43
Stack now 0 5 62 17 43
Next token is token CLOSE_BRACKET ()
Reducing stack by rule 62 (line 409):
   $1 = nterm and_test ()
-> $$ = nterm or_test ()
Entering state 41
Stack now 0 5 62 17 41
Reducing stack by rule 61 (line 402):
   $1 = nterm or_test ()
-> $$ = nterm test ()
Entering state 71
Stack now 0 5 62 17 71
Reducing stack by rule 130 (line 666):
   $1 = nterm test ()
-> $$ = nterm testlist_list ()
Entering state 73
Stack now 0 5 62 17 73
Next token is token CLOSE_BRACKET ()
Reducing stack by rule 128 (line 659):
   $1 = nterm testlist_list ()
-> $$ = nterm testlist ()
Entering state 72
Stack now 0 5 62 17 72
Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 124
Stack now 0 5 62 17 72 124
Reducing stack by rule 113 (line 608):
   $1 = token OPEN_BRACKET ()
   $2 = nterm testlist ()
   $3 = token CLOSE_BRACKET ()
-> $$ = nterm atom ()
Entering state 57
Stack now 0 5 62 57
Reducing stack by rule 110 (line 596):
   $1 = nterm atom ()
-> $$ = nterm atom_expr ()
Entering state 56
Stack now 0 5 62 56
Reading a token
Next token is token COLON ()
Reducing stack by rule 108 (line 587):
   $1 = nterm atom_expr ()
-> $$ = nterm power ()
Entering state 55
Stack now 0 5 62 55
Reducing stack by rule 104 (line 572):
   $1 = nterm power ()
-> $$ = nterm factor ()
Entering state 53
Stack now 0 5 62 53
Reducing stack by rule 96 (line 543):
   $1 = nterm factor ()
-> $$ = nterm term ()
Entering state 52
Stack now 0 5 62 52
Next token is token COLON ()
Reducing stack by rule 93 (line 532):
   $1 = nterm term ()
-> $$ = nterm arith_expr ()
Entering state 51
Stack now 0 5 62 51
Next token is token COLON ()
Reducing stack by rule 91 (line 523):
   $1 = nterm arith_expr ()
-> $$ = nterm shift_expr ()
Entering state 50
Stack now 0 5 62 50
Next token is token COLON ()
Reducing stack by rule 89 (line 514):
   $1 = nterm shift_expr ()
-> $$ = nterm and_expr ()
Entering state 49
Stack now 0 5 62 49
Next token is token COLON ()
Reducing stack by rule 87 (line 506):
   $1 = nterm and_expr ()
-> $$ = nterm xor_expr ()
Entering state 48
Stack now 0 5 62 48
Next token is token COLON ()
Reducing stack by rule 85 (line 498):
   $1 = nterm xor_expr ()
-> $$ = nterm expr ()
Entering state 47
Stack now 0 5 62 47
Next token is token COLON ()
Reducing stack by rule 72 (line 448):
   $1 = nterm expr ()
-> $$ = nterm comparison ()
Entering state 46
Stack now 0 5 62 46
Reducing stack by rule 71 (line 442):
   $1 = nterm comparison ()
-> $$ = nterm not_test ()
Entering state 45
Stack now 0 5 62 45
Next token is token COLON ()
Reducing stack by rule 66 (line 424):
   $1 = nterm not_test ()
-> $$ = nterm and_test ()
Entering state 43
Stack now 0 5 62 43
Next token is token COLON ()
Reducing stack by rule 62 (line 409):
   $1 = nterm and_test ()
-> $$ = nterm or_test ()
Entering state 41
Stack now 0 5 62 41
Reducing stack by rule 61 (line 402):
   $1 = nterm or_test ()
-> $$ = nterm test ()
Entering state 118
Stack now 0 5 62 118
Next token is token COLON ()
Shifting token COLON ()
Entering state 154
Stack now 0 5 62 118 154
Reducing stack by rule 1 (line 133):
-> $$ = nterm M ()
Entering state 175
Stack now 0 5 62 118 154 175
Reading a token
Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 158
Stack now 0 5 62 118 154 175 158
Reading a token
Next token is token INDENT ()
Shifting token INDENT ()
Entering state 179
Stack now 0 5 62 118 154 175 158 179
Reading a token
Next token is token IF ()
Shifting token IF ()
Entering state 4
Stack now 0 5 62 118 154 175 158 179 4
Reading a token
Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 17
Stack now 0 5 62 118 154 175 158 179 4 17
Reading a token
Next token is token NAME ()
Shifting token NAME ()
Entering state 3
Stack now 0 5 62 118 154 175 158 179 4 17 3
Reducing stack by rule 118 (line 623):
   $1 = token NAME ()
-> $$ = nterm atom ()
Entering state 57
Stack now 0 5 62 118 154 175 158 179 4 17 57
Reducing stack by rule 110 (line 596):
   $1 = nterm atom ()
-> $$ = nterm atom_expr ()
Entering state 56
Stack now 0 5 62 118 154 175 158 179 4 17 56
Reading a token
Next token is token LESS_THAN ()
Reducing stack by rule 108 (line 587):
   $1 = nterm atom_expr ()
-> $$ = nterm power ()
Entering state 55
Stack now 0 5 62 118 154 175 158 179 4 17 55
Reducing stack by rule 104 (line 572):
   $1 = nterm power ()
-> $$ = nterm factor ()
Entering state 53
Stack now 0 5 62 118 154 175 158 179 4 17 53
Reducing stack by rule 96 (line 543):
   $1 = nterm factor ()
-> $$ = nterm term ()
Entering state 52
Stack now 0 5 62 118 154 175 158 179 4 17 52
Next token is token LESS_THAN ()
Reducing stack by rule 93 (line 532):
   $1 = nterm term ()
-> $$ = nterm arith_expr ()
Entering state 51
Stack now 0 5 62 118 154 175 158 179 4 17 51
Next token is token LESS_THAN ()
Reducing stack by rule 91 (line 523):
   $1 = nterm arith_expr ()
-> $$ = nterm shift_expr ()
Entering state 50
Stack now 0 5 62 118 154 175 158 179 4 17 50
Next token is token LESS_THAN ()
Reducing stack by rule 89 (line 514):
   $1 = nterm shift_expr ()
-> $$ = nterm and_expr ()
Entering state 49
Stack now 0 5 62 118 154 175 158 179 4 17 49
Next token is token LESS_THAN ()
Reducing stack by rule 87 (line 506):
   $1 = nterm and_expr ()
-> $$ = nterm xor_expr ()
Entering state 48
Stack now 0 5 62 118 154 175 158 179 4 17 48
Next token is token LESS_THAN ()
Reducing stack by rule 85 (line 498):
   $1 = nterm xor_expr ()
-> $$ = nterm expr ()
Entering state 47
Stack now 0 5 62 118 154 175 158 179 4 17 47
Next token is token LESS_THAN ()
Shifting token LESS_THAN ()
Entering state 90
Stack now 0 5 62 118 154 175 158 179 4 17 47 90
Reducing stack by rule 74 (line 463):
   $1 = token LESS_THAN ()
-> $$ = nterm comp_op ()
Entering state 98
Stack now 0 5 62 118 154 175 158 179 4 17 47 98
Reading a token
Next token is token NAME ()
Shifting token NAME ()
Entering state 3
Stack now 0 5 62 118 154 175 158 179 4 17 47 98 3
Reducing stack by rule 118 (line 623):
   $1 = token NAME ()
-> $$ = nterm atom ()
Entering state 57
Stack now 0 5 62 118 154 175 158 179 4 17 47 98 57
Reducing stack by rule 110 (line 596):
   $1 = nterm atom ()
-> $$ = nterm atom_expr ()
Entering state 56
Stack now 0 5 62 118 154 175 158 179 4 17 47 98 56
Reading a token
Next token is token CLOSE_BRACKET ()
Reducing stack by rule 108 (line 587):
   $1 = nterm atom_expr ()
-> $$ = nterm power ()
Entering state 55
Stack now 0 5 62 118 154 175 158 179 4 17 47 98 55
Reducing stack by rule 104 (line 572):
   $1 = nterm power ()
-> $$ = nterm factor ()
Entering state 53
Stack now 0 5 62 118 154 175 158 179 4 17 47 98 53
Reducing stack by rule 96 (line 543):
   $1 = nterm factor ()
-> $$ = nterm term ()
Entering state 52
Stack now 0 5 62 118 154 175 158 179 4 17 47 98 52
Next token is token CLOSE_BRACKET ()
Reducing stack by rule 93 (line 532):
   $1 = nterm term ()
-> $$ = nterm arith_expr ()
Entering state 51
Stack now 0 5 62 118 154 175 158 179 4 17 47 98 51
Next token is token CLOSE_BRACKET ()
Reducing stack by rule 91 (line 523):
   $1 = nterm arith_expr ()
-> $$ = nterm shift_expr ()
Entering state 50
Stack now 0 5 62 118 154 175 158 179 4 17 47 98 50
Next token is token CLOSE_BRACKET ()
Reducing stack by rule 89 (line 514):
   $1 = nterm shift_expr ()
-> $$ = nterm and_expr ()
Entering state 49
Stack now 0 5 62 118 154 175 158 179 4 17 47 98 49
Next token is token CLOSE_BRACKET ()
Reducing stack by rule 87 (line 506):
   $1 = nterm and_expr ()
-> $$ = nterm xor_expr ()
Entering state 48
Stack now 0 5 62 118 154 175 158 179 4 17 47 98 48
Next token is token CLOSE_BRACKET ()
Reducing stack by rule 85 (line 498):
   $1 = nterm xor_expr ()
-> $$ = nterm expr ()
Entering state 47
Stack now 0 5 62 118 154 175 158 179 4 17 47 98 47
Next token is token CLOSE_BRACKET ()
Reducing stack by rule 72 (line 448):
   $1 = nterm expr ()
-> $$ = nterm comparison ()
Entering state 137
Stack now 0 5 62 118 154 175 158 179 4 17 47 98 137
Reducing stack by rule 73 (line 451):
   $1 = nterm expr ()
   $2 = nterm comp_op ()
   $3 = nterm comparison ()
-> $$ = nterm comparison ()
Entering state 46
Stack now 0 5 62 118 154 175 158 179 4 17 46
Reducing stack by rule 71 (line 442):
   $1 = nterm comparison ()
-> $$ = nterm not_test ()
Entering state 45
Stack now 0 5 62 118 154 175 158 179 4 17 45
Next token is token CLOSE_BRACKET ()
Reducing stack by rule 66 (line 424):
   $1 = nterm not_test ()
-> $$ = nterm and_test ()
Entering state 43
Stack now 0 5 62 118 154 175 158 179 4 17 43
Next token is token CLOSE_BRACKET ()
Reducing stack by rule 62 (line 409):
   $1 = nterm and_test ()
-> $$ = nterm or_test ()
Entering state 41
Stack now 0 5 62 118 154 175 158 179 4 17 41
Reducing stack by rule 61 (line 402):
   $1 = nterm or_test ()
-> $$ = nterm test ()
Entering state 71
Stack now 0 5 62 118 154 175 158 179 4 17 71
Reducing stack by rule 130 (line 666):
   $1 = nterm test ()
-> $$ = nterm testlist_list ()
Entering state 73
Stack now 0 5 62 118 154 175 158 179 4 17 73
Next token is token CLOSE_BRACKET ()
Reducing stack by rule 128 (line 659):
   $1 = nterm testlist_list ()
-> $$ = nterm testlist ()
Entering state 72
Stack now 0 5 62 118 154 175 158 179 4 17 72
Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 124
Stack now 0 5 62 118 154 175 158 179 4 17 72 124
Reducing stack by rule 113 (line 608):
   $1 = token OPEN_BRACKET ()
   $2 = nterm testlist ()
   $3 = token CLOSE_BRACKET ()
-> $$ = nterm atom ()
Entering state 57
Stack now 0 5 62 118 154 175 158 179 4 57
Reducing stack by rule 110 (line 596):
   $1 = nterm atom ()
-> $$ = nterm atom_expr ()
Entering state 56
Stack now 0 5 62 118 154 175 158 179 4 56
Reading a token
Next token is token COLON ()
Reducing stack by rule 108 (line 587):
   $1 = nterm atom_expr ()
-> $$ = nterm power ()
Entering state 55
Stack now 0 5 62 118 154 175 158 179 4 55
Reducing stack by rule 104 (line 572):
   $1 = nterm power ()
-> $$ = nterm factor ()
Entering state 53
Stack now 0 5 62 118 154 175 158 179 4 53
Reducing stack by rule 96 (line 543):
   $1 = nterm factor ()
-> $$ = nterm term ()
Entering state 52
Stack now 0 5 62 118 154 175 158 179 4 52
Next token is token COLON ()
Reducing stack by rule 93 (line 532):
   $1 = nterm term ()
-> $$ = nterm arith_expr ()
Entering state 51
Stack now 0 5 62 118 154 175 158 179 4 51
Next token is token COLON ()
Reducing stack by rule 91 (line 523):
   $1 = nterm arith_expr ()
-> $$ = nterm shift_expr ()
Entering state 50
Stack now 0 5 62 118 154 175 158 179 4 50
Next token is token COLON ()
Reducing stack by rule 89 (line 514):
   $1 = nterm shift_expr ()
-> $$ = nterm and_expr ()
Entering state 49
Stack now 0 5 62 118 154 175 158 179 4 49
Next token is token COLON ()
Reducing stack by rule 87 (line 506):
   $1 = nterm and_expr ()
-> $$ = nterm xor_expr ()
Entering state 48
Stack now 0 5 62 118 154 175 158 179 4 48
Next token is token COLON ()
Reducing stack by rule 85 (line 498):
   $1 = nterm xor_expr ()
-> $$ = nterm expr ()
Entering state 47
Stack now 0 5 62 118 154 175 158 179 4 47
Next token is token COLON ()
Reducing stack by rule 72 (line 448):
   $1 = nterm expr ()
-> $$ = nterm comparison ()
Entering state 46
Stack now 0 5 62 118 154 175 158 179 4 46
Reducing stack by rule 71 (line 442):
   $1 = nterm comparison ()
-> $$ = nterm not_test ()
Entering state 45
Stack now 0 5 62 118 154 175 158 179 4 45
Next token is token COLON ()
Reducing stack by rule 66 (line 424):
   $1 = nterm not_test ()
-> $$ = nterm and_test ()
Entering state 43
Stack now 0 5 62 118 154 175 158 179 4 43
Next token is token COLON ()
Reducing stack by rule 62 (line 409):
   $1 = nterm and_test ()
-> $$ = nterm or_test ()
Entering state 41
Stack now 0 5 62 118 154 175 158 179 4 41
Reducing stack by rule 61 (line 402):
   $1 = nterm or_test ()
-> $$ = nterm test ()
Entering state 61
Stack now 0 5 62 118 154 175 158 179 4 61
Next token is token COLON ()
Shifting token COLON ()
Entering state 117
Stack now 0 5 62 118 154 175 158 179 4 61 117
Reducing stack by rule 1 (line 133):
-> $$ = nterm M ()
Entering state 153
Stack now 0 5 62 118 154 175 158 179 4 61 117 153
Reading a token
Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 158
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 158
Reading a token
Next token is token INDENT ()
Shifting token INDENT ()
Entering state 179
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 158 179
Reading a token
Next token is token NAME ()
Shifting token NAME ()
Entering state 3
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 158 179 3
Reducing stack by rule 118 (line 623):
   $1 = token NAME ()
-> $$ = nterm atom ()
Entering state 57
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 158 179 57
Reducing stack by rule 110 (line 596):
   $1 = nterm atom ()
-> $$ = nterm atom_expr ()
Entering state 56
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 158 179 56
Reading a token
Next token is token NEWLINE ()
Reducing stack by rule 108 (line 587):
   $1 = nterm atom_expr ()
-> $$ = nterm power ()
Entering state 55
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 158 179 55
Reducing stack by rule 104 (line 572):
   $1 = nterm power ()
-> $$ = nterm factor ()
Entering state 53
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 158 179 53
Reducing stack by rule 96 (line 543):
   $1 = nterm factor ()
-> $$ = nterm term ()
Entering state 52
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 158 179 52
Next token is token NEWLINE ()
Reducing stack by rule 93 (line 532):
   $1 = nterm term ()
-> $$ = nterm arith_expr ()
Entering state 51
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 158 179 51
Next token is token NEWLINE ()
Reducing stack by rule 91 (line 523):
   $1 = nterm arith_expr ()
-> $$ = nterm shift_expr ()
Entering state 50
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 158 179 50
Next token is token NEWLINE ()
Reducing stack by rule 89 (line 514):
   $1 = nterm shift_expr ()
-> $$ = nterm and_expr ()
Entering state 49
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 158 179 49
Next token is token NEWLINE ()
Reducing stack by rule 87 (line 506):
   $1 = nterm and_expr ()
-> $$ = nterm xor_expr ()
Entering state 48
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 158 179 48
Next token is token NEWLINE ()
Reducing stack by rule 85 (line 498):
   $1 = nterm xor_expr ()
-> $$ = nterm expr ()
Entering state 47
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 158 179 47
Next token is token NEWLINE ()
Reducing stack by rule 72 (line 448):
   $1 = nterm expr ()
-> $$ = nterm comparison ()
Entering state 46
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 158 179 46
Reducing stack by rule 71 (line 442):
   $1 = nterm comparison ()
-> $$ = nterm not_test ()
Entering state 45
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 158 179 45
Next token is token NEWLINE ()
Reducing stack by rule 66 (line 424):
   $1 = nterm not_test ()
-> $$ = nterm and_test ()
Entering state 43
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 158 179 43
Next token is token NEWLINE ()
Reducing stack by rule 62 (line 409):
   $1 = nterm and_test ()
-> $$ = nterm or_test ()
Entering state 41
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 158 179 41
Reducing stack by rule 61 (line 402):
   $1 = nterm or_test ()
-> $$ = nterm test ()
Entering state 40
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 158 179 40
Next token is token NEWLINE ()
Reducing stack by rule 30 (line 251):
   $1 = nterm test ()
-> $$ = nterm expr_stmt ()
Entering state 30
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 158 179 30
Reducing stack by rule 25 (line 234):
   $1 = nterm expr_stmt ()
-> $$ = nterm small_stmt ()
Entering state 29
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 158 179 29
Reducing stack by rule 23 (line 226):
   $1 = nterm small_stmt ()
-> $$ = nterm small_stmt_list ()
Entering state 28
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 158 179 28
Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 79
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 158 179 28 79
Reducing stack by rule 22 (line 221):
   $1 = nterm small_stmt_list ()
   $2 = token NEWLINE ()
-> $$ = nterm simple_stmt ()
Entering state 27
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 158 179 27
Reducing stack by rule 19 (line 210):
   $1 = nterm simple_stmt ()
-> $$ = nterm stmt ()
Entering state 198
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 158 179 198
Reading a token
Next token is token DEDENT ()
Reducing stack by rule 144 (line 718):
   $1 = nterm stmt ()
-> $$ = nterm stmt_plus ()
Entering state 199
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 158 179 199
Next token is token DEDENT ()
Shifting token DEDENT ()
Entering state 215
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 158 179 199 215
Reducing stack by rule 56 (line 372):
   $1 = token NEWLINE ()
   $2 = token INDENT ()
   $3 = nterm stmt_plus ()
   $4 = token DEDENT ()
-> $$ = nterm suite ()
Entering state 174
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174
Reading a token
Next token is token ELSE ()
Reducing stack by rule 2 (line 139):
-> $$ = nterm N ()
Entering state 193
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193
Next token is token ELSE ()
Shifting token ELSE ()
Entering state 207
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207
Reading a token
Next token is token COLON ()
Shifting token COLON ()
Entering state 219
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219
Reducing stack by rule 1 (line 133):
-> $$ = nterm M ()
Entering state 227
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227
Reading a token
Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 158
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158
Reading a token
Next token is token INDENT ()
Shifting token INDENT ()
Entering state 179
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179
Reading a token
Next token is token NAME ()
Shifting token NAME ()
Entering state 3
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 3
Reducing stack by rule 118 (line 623):
   $1 = token NAME ()
-> $$ = nterm atom ()
Entering state 57
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 57
Reducing stack by rule 110 (line 596):
   $1 = nterm atom ()
-> $$ = nterm atom_expr ()
Entering state 56
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 56
Reading a token
Next token is token EQUAL ()
Reducing stack by rule 108 (line 587):
   $1 = nterm atom_expr ()
-> $$ = nterm power ()
Entering state 55
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 55
Reducing stack by rule 104 (line 572):
   $1 = nterm power ()
-> $$ = nterm factor ()
Entering state 53
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 53
Reducing stack by rule 96 (line 543):
   $1 = nterm factor ()
-> $$ = nterm term ()
Entering state 52
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 52
Next token is token EQUAL ()
Reducing stack by rule 93 (line 532):
   $1 = nterm term ()
-> $$ = nterm arith_expr ()
Entering state 51
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 51
Next token is token EQUAL ()
Reducing stack by rule 91 (line 523):
   $1 = nterm arith_expr ()
-> $$ = nterm shift_expr ()
Entering state 50
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 50
Next token is token EQUAL ()
Reducing stack by rule 89 (line 514):
   $1 = nterm shift_expr ()
-> $$ = nterm and_expr ()
Entering state 49
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 49
Next token is token EQUAL ()
Reducing stack by rule 87 (line 506):
   $1 = nterm and_expr ()
-> $$ = nterm xor_expr ()
Entering state 48
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 48
Next token is token EQUAL ()
Reducing stack by rule 85 (line 498):
   $1 = nterm xor_expr ()
-> $$ = nterm expr ()
Entering state 47
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 47
Next token is token EQUAL ()
Reducing stack by rule 72 (line 448):
   $1 = nterm expr ()
-> $$ = nterm comparison ()
Entering state 46
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 46
Reducing stack by rule 71 (line 442):
   $1 = nterm comparison ()
-> $$ = nterm not_test ()
Entering state 45
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 45
Next token is token EQUAL ()
Reducing stack by rule 66 (line 424):
   $1 = nterm not_test ()
-> $$ = nterm and_test ()
Entering state 43
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 43
Next token is token EQUAL ()
Reducing stack by rule 62 (line 409):
   $1 = nterm and_test ()
-> $$ = nterm or_test ()
Entering state 41
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 41
Reducing stack by rule 61 (line 402):
   $1 = nterm or_test ()
-> $$ = nterm test ()
Entering state 40
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 40
Next token is token EQUAL ()
Shifting token EQUAL ()
Entering state 83
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 40 83
Reading a token
Next token is token NAME ()
Shifting token NAME ()
Entering state 3
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 40 83 3
Reducing stack by rule 118 (line 623):
   $1 = token NAME ()
-> $$ = nterm atom ()
Entering state 57
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 40 83 57
Reducing stack by rule 110 (line 596):
   $1 = nterm atom ()
-> $$ = nterm atom_expr ()
Entering state 56
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 40 83 56
Reading a token
Next token is token NEWLINE ()
Reducing stack by rule 108 (line 587):
   $1 = nterm atom_expr ()
-> $$ = nterm power ()
Entering state 55
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 40 83 55
Reducing stack by rule 104 (line 572):
   $1 = nterm power ()
-> $$ = nterm factor ()
Entering state 53
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 40 83 53
Reducing stack by rule 96 (line 543):
   $1 = nterm factor ()
-> $$ = nterm term ()
Entering state 52
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 40 83 52
Next token is token NEWLINE ()
Reducing stack by rule 93 (line 532):
   $1 = nterm term ()
-> $$ = nterm arith_expr ()
Entering state 51
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 40 83 51
Next token is token NEWLINE ()
Reducing stack by rule 91 (line 523):
   $1 = nterm arith_expr ()
-> $$ = nterm shift_expr ()
Entering state 50
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 40 83 50
Next token is token NEWLINE ()
Reducing stack by rule 89 (line 514):
   $1 = nterm shift_expr ()
-> $$ = nterm and_expr ()
Entering state 49
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 40 83 49
Next token is token NEWLINE ()
Reducing stack by rule 87 (line 506):
   $1 = nterm and_expr ()
-> $$ = nterm xor_expr ()
Entering state 48
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 40 83 48
Next token is token NEWLINE ()
Reducing stack by rule 85 (line 498):
   $1 = nterm xor_expr ()
-> $$ = nterm expr ()
Entering state 47
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 40 83 47
Next token is token NEWLINE ()
Reducing stack by rule 72 (line 448):
   $1 = nterm expr ()
-> $$ = nterm comparison ()
Entering state 46
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 40 83 46
Reducing stack by rule 71 (line 442):
   $1 = nterm comparison ()
-> $$ = nterm not_test ()
Entering state 45
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 40 83 45
Next token is token NEWLINE ()
Reducing stack by rule 66 (line 424):
   $1 = nterm not_test ()
-> $$ = nterm and_test ()
Entering state 43
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 40 83 43
Next token is token NEWLINE ()
Reducing stack by rule 62 (line 409):
   $1 = nterm and_test ()
-> $$ = nterm or_test ()
Entering state 41
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 40 83 41
Reducing stack by rule 61 (line 402):
   $1 = nterm or_test ()
-> $$ = nterm test ()
Entering state 131
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 40 83 131
Reducing stack by rule 31 (line 254):
   $1 = nterm test ()
   $2 = token EQUAL ()
   $3 = nterm test ()
-> $$ = nterm expr_stmt ()
Entering state 30
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 30
Reducing stack by rule 25 (line 234):
   $1 = nterm expr_stmt ()
-> $$ = nterm small_stmt ()
Entering state 29
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 29
Reducing stack by rule 23 (line 226):
   $1 = nterm small_stmt ()
-> $$ = nterm small_stmt_list ()
Entering state 28
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 28
Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 79
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 28 79
Reducing stack by rule 22 (line 221):
   $1 = nterm small_stmt_list ()
   $2 = token NEWLINE ()
-> $$ = nterm simple_stmt ()
Entering state 27
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 27
Reducing stack by rule 19 (line 210):
   $1 = nterm simple_stmt ()
-> $$ = nterm stmt ()
Entering state 198
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 198
Reading a token
Next token is token DEDENT ()
Reducing stack by rule 144 (line 718):
   $1 = nterm stmt ()
-> $$ = nterm stmt_plus ()
Entering state 199
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 199
Next token is token DEDENT ()
Shifting token DEDENT ()
Entering state 215
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 158 179 199 215
Reducing stack by rule 56 (line 372):
   $1 = token NEWLINE ()
   $2 = token INDENT ()
   $3 = nterm stmt_plus ()
   $4 = token DEDENT ()
-> $$ = nterm suite ()
Entering state 232
Stack now 0 5 62 118 154 175 158 179 4 61 117 153 174 193 207 219 227 232
Reducing stack by rule 49 (line 327):
   $1 = token IF ()
   $2 = nterm test ()
   $3 = token COLON ()
   $4 = nterm M ()
   $5 = nterm suite ()
   $6 = nterm N ()
   $7 = token ELSE ()
   $8 = token COLON ()
   $9 = nterm M ()
   $10 = nterm suite ()
-> $$ = nterm if_stmt ()
Entering state 37
Stack now 0 5 62 118 154 175 158 179 37
Reducing stack by rule 43 (line 304):
   $1 = nterm if_stmt ()
-> $$ = nterm compound_stmt ()
Entering state 36
Stack now 0 5 62 118 154 175 158 179 36
Reducing stack by rule 20 (line 213):
   $1 = nterm compound_stmt ()
-> $$ = nterm stmt ()
Entering state 198
Stack now 0 5 62 118 154 175 158 179 198
Reading a token
Next token is token DEDENT ()
Reducing stack by rule 144 (line 718):
   $1 = nterm stmt ()
-> $$ = nterm stmt_plus ()
Entering state 199
Stack now 0 5 62 118 154 175 158 179 199
Next token is token DEDENT ()
Shifting token DEDENT ()
Entering state 215
Stack now 0 5 62 118 154 175 158 179 199 215
Reducing stack by rule 56 (line 372):
   $1 = token NEWLINE ()
   $2 = token INDENT ()
   $3 = nterm stmt_plus ()
   $4 = token DEDENT ()
-> $$ = nterm suite ()
Entering state 194
Stack now 0 5 62 118 154 175 194
Reading a token
Now at end of input.
Reducing stack by rule 51 (line 342):
   $1 = token WHILE ()
   $2 = nterm M ()
   $3 = nterm test ()
   $4 = token COLON ()
   $5 = nterm M ()
   $6 = nterm suite ()
-> $$ = nterm while_stmt ()
Entering state 38
Stack now 0 38
Reducing stack by rule 44 (line 307):
   $1 = nterm while_stmt ()
-> $$ = nterm compound_stmt ()
Entering state 36
Stack now 0 36
Reducing stack by rule 20 (line 213):
   $1 = nterm compound_stmt ()
-> $$ = nterm stmt ()
Entering state 26
Stack now 0 26
Now at end of input.
Reducing stack by rule 5 (line 154):
   $1 = nterm stmt ()
-> $$ = nterm snippet ()
Entering state 24
Stack now 0 24
Reducing stack by rule 3 (line 146):
   $1 = nterm snippet ()
-> $$ = nterm file ()
Entering state 23
Stack now 0 23
Now at end of input.
Shifting token "end of file" ()
Entering state 77
Stack now 0 23 77
Stack now 0 23 77
Cleanup: popping token "end of file" ()
Cleanup: popping nterm file ()
