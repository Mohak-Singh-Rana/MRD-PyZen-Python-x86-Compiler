Starting parse
Entering state 0
Stack now 0
Reading a token
Next token is token WHILE ()
Shifting token WHILE ()
Entering state 5
Stack now 0 5
Reducing stack by rule 1 (line 133):
-> $$ = nterm M ()
Entering state 64
Stack now 0 5 64
Reading a token
Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 17
Stack now 0 5 64 17
Reading a token
Next token is token NOT ()
Shifting token NOT ()
Entering state 7
Stack now 0 5 64 17 7
Reading a token
Next token is token NAME ()
Shifting token NAME ()
Entering state 3
Stack now 0 5 64 17 7 3
Reducing stack by rule 121 (line 703):
   $1 = token NAME ()
-> $$ = nterm atom ()
Entering state 57
Stack now 0 5 64 17 7 57
Reducing stack by rule 113 (line 672):
   $1 = nterm atom ()
-> $$ = nterm atom_expr ()
Entering state 56
Stack now 0 5 64 17 7 56
Reading a token
Next token is token GREATER_THAN ()
Reducing stack by rule 111 (line 661):
   $1 = nterm atom_expr ()
-> $$ = nterm power ()
Entering state 55
Stack now 0 5 64 17 7 55
Reducing stack by rule 107 (line 647):
   $1 = nterm power ()
-> $$ = nterm factor ()
Entering state 53
Stack now 0 5 64 17 7 53
Reducing stack by rule 99 (line 612):
   $1 = nterm factor ()
-> $$ = nterm term ()
Entering state 52
Stack now 0 5 64 17 7 52
Next token is token GREATER_THAN ()
Reducing stack by rule 96 (line 595):
   $1 = nterm term ()
-> $$ = nterm arith_expr ()
Entering state 51
Stack now 0 5 64 17 7 51
Next token is token GREATER_THAN ()
Reducing stack by rule 94 (line 583):
   $1 = nterm arith_expr ()
-> $$ = nterm shift_expr ()
Entering state 50
Stack now 0 5 64 17 7 50
Next token is token GREATER_THAN ()
Reducing stack by rule 92 (line 571):
   $1 = nterm shift_expr ()
-> $$ = nterm and_expr ()
Entering state 49
Stack now 0 5 64 17 7 49
Next token is token GREATER_THAN ()
Reducing stack by rule 90 (line 560):
   $1 = nterm and_expr ()
-> $$ = nterm xor_expr ()
Entering state 48
Stack now 0 5 64 17 7 48
Next token is token GREATER_THAN ()
Reducing stack by rule 88 (line 549):
   $1 = nterm xor_expr ()
-> $$ = nterm expr ()
Entering state 47
Stack now 0 5 64 17 7 47
Next token is token GREATER_THAN ()
Shifting token GREATER_THAN ()
Entering state 90
Stack now 0 5 64 17 7 47 90
Reducing stack by rule 78 (line 517):
   $1 = token GREATER_THAN ()
-> $$ = nterm comp_op ()
Entering state 97
Stack now 0 5 64 17 7 47 97
Reading a token
Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 16
Stack now 0 5 64 17 7 47 97 16
Reducing stack by rule 122 (line 707):
   $1 = token NUMBER ()
-> $$ = nterm atom ()
Entering state 57
Stack now 0 5 64 17 7 47 97 57
Reducing stack by rule 113 (line 672):
   $1 = nterm atom ()
-> $$ = nterm atom_expr ()
Entering state 56
Stack now 0 5 64 17 7 47 97 56
Reading a token
Next token is token CLOSE_BRACKET ()
Reducing stack by rule 111 (line 661):
   $1 = nterm atom_expr ()
-> $$ = nterm power ()
Entering state 55
Stack now 0 5 64 17 7 47 97 55
Reducing stack by rule 107 (line 647):
   $1 = nterm power ()
-> $$ = nterm factor ()
Entering state 53
Stack now 0 5 64 17 7 47 97 53
Reducing stack by rule 99 (line 612):
   $1 = nterm factor ()
-> $$ = nterm term ()
Entering state 52
Stack now 0 5 64 17 7 47 97 52
Next token is token CLOSE_BRACKET ()
Reducing stack by rule 96 (line 595):
   $1 = nterm term ()
-> $$ = nterm arith_expr ()
Entering state 51
Stack now 0 5 64 17 7 47 97 51
Next token is token CLOSE_BRACKET ()
Reducing stack by rule 94 (line 583):
   $1 = nterm arith_expr ()
-> $$ = nterm shift_expr ()
Entering state 50
Stack now 0 5 64 17 7 47 97 50
Next token is token CLOSE_BRACKET ()
Reducing stack by rule 92 (line 571):
   $1 = nterm shift_expr ()
-> $$ = nterm and_expr ()
Entering state 49
Stack now 0 5 64 17 7 47 97 49
Next token is token CLOSE_BRACKET ()
Reducing stack by rule 90 (line 560):
   $1 = nterm and_expr ()
-> $$ = nterm xor_expr ()
Entering state 48
Stack now 0 5 64 17 7 47 97 48
Next token is token CLOSE_BRACKET ()
Reducing stack by rule 88 (line 549):
   $1 = nterm xor_expr ()
-> $$ = nterm expr ()
Entering state 47
Stack now 0 5 64 17 7 47 97 47
Next token is token CLOSE_BRACKET ()
Reducing stack by rule 75 (line 499):
   $1 = nterm expr ()
-> $$ = nterm comparison ()
Entering state 138
Stack now 0 5 64 17 7 47 97 138
Reducing stack by rule 76 (line 502):
   $1 = nterm expr ()
   $2 = nterm comp_op ()
   $3 = nterm comparison ()
-> $$ = nterm comparison ()
Entering state 46
Stack now 0 5 64 17 7 46
Reducing stack by rule 74 (line 494):
   $1 = nterm comparison ()
-> $$ = nterm not_test ()
Entering state 66
Stack now 0 5 64 17 7 66
Reducing stack by rule 73 (line 488):
   $1 = token NOT ()
   $2 = nterm not_test ()
-> $$ = nterm not_test ()
Entering state 45
Stack now 0 5 64 17 45
Next token is token CLOSE_BRACKET ()
Reducing stack by rule 69 (line 465):
   $1 = nterm not_test ()
-> $$ = nterm and_test ()
Entering state 43
Stack now 0 5 64 17 43
Next token is token CLOSE_BRACKET ()
Reducing stack by rule 65 (line 442):
   $1 = nterm and_test ()
-> $$ = nterm or_test ()
Entering state 41
Stack now 0 5 64 17 41
Reducing stack by rule 64 (line 433):
   $1 = nterm or_test ()
-> $$ = nterm test ()
Entering state 73
Stack now 0 5 64 17 73
Reducing stack by rule 133 (line 751):
   $1 = nterm test ()
-> $$ = nterm testlist_list ()
Entering state 60
Stack now 0 5 64 17 60
Next token is token CLOSE_BRACKET ()
Reducing stack by rule 131 (line 744):
   $1 = nterm testlist_list ()
-> $$ = nterm testlist ()
Entering state 74
Stack now 0 5 64 17 74
Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 126
Stack now 0 5 64 17 74 126
Reducing stack by rule 116 (line 685):
   $1 = token OPEN_BRACKET ()
   $2 = nterm testlist ()
   $3 = token CLOSE_BRACKET ()
-> $$ = nterm atom ()
Entering state 57
Stack now 0 5 64 57
Reducing stack by rule 113 (line 672):
   $1 = nterm atom ()
-> $$ = nterm atom_expr ()
Entering state 56
Stack now 0 5 64 56
Reading a token
Next token is token COLON ()
Reducing stack by rule 111 (line 661):
   $1 = nterm atom_expr ()
-> $$ = nterm power ()
Entering state 55
Stack now 0 5 64 55
Reducing stack by rule 107 (line 647):
   $1 = nterm power ()
-> $$ = nterm factor ()
Entering state 53
Stack now 0 5 64 53
Reducing stack by rule 99 (line 612):
   $1 = nterm factor ()
-> $$ = nterm term ()
Entering state 52
Stack now 0 5 64 52
Next token is token COLON ()
Reducing stack by rule 96 (line 595):
   $1 = nterm term ()
-> $$ = nterm arith_expr ()
Entering state 51
Stack now 0 5 64 51
Next token is token COLON ()
Reducing stack by rule 94 (line 583):
   $1 = nterm arith_expr ()
-> $$ = nterm shift_expr ()
Entering state 50
Stack now 0 5 64 50
Next token is token COLON ()
Reducing stack by rule 92 (line 571):
   $1 = nterm shift_expr ()
-> $$ = nterm and_expr ()
Entering state 49
Stack now 0 5 64 49
Next token is token COLON ()
Reducing stack by rule 90 (line 560):
   $1 = nterm and_expr ()
-> $$ = nterm xor_expr ()
Entering state 48
Stack now 0 5 64 48
Next token is token COLON ()
Reducing stack by rule 88 (line 549):
   $1 = nterm xor_expr ()
-> $$ = nterm expr ()
Entering state 47
Stack now 0 5 64 47
Next token is token COLON ()
Reducing stack by rule 75 (line 499):
   $1 = nterm expr ()
-> $$ = nterm comparison ()
Entering state 46
Stack now 0 5 64 46
Reducing stack by rule 74 (line 494):
   $1 = nterm comparison ()
-> $$ = nterm not_test ()
Entering state 45
Stack now 0 5 64 45
Next token is token COLON ()
Reducing stack by rule 69 (line 465):
   $1 = nterm not_test ()
-> $$ = nterm and_test ()
Entering state 43
Stack now 0 5 64 43
Next token is token COLON ()
Reducing stack by rule 65 (line 442):
   $1 = nterm and_test ()
-> $$ = nterm or_test ()
Entering state 41
Stack now 0 5 64 41
Reducing stack by rule 64 (line 433):
   $1 = nterm or_test ()
-> $$ = nterm test ()
Entering state 118
Stack now 0 5 64 118
Next token is token COLON ()
Shifting token COLON ()
Entering state 156
Stack now 0 5 64 118 156
Reducing stack by rule 1 (line 133):
-> $$ = nterm M ()
Entering state 180
Stack now 0 5 64 118 156 180
Reading a token
Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 160
Stack now 0 5 64 118 156 180 160
Reading a token
Next token is token INDENT ()
Shifting token INDENT ()
Entering state 184
Stack now 0 5 64 118 156 180 160 184
Reading a token
Next token is token NAME ()
Shifting token NAME ()
Entering state 3
Stack now 0 5 64 118 156 180 160 184 3
Reducing stack by rule 121 (line 703):
   $1 = token NAME ()
-> $$ = nterm atom ()
Entering state 57
Stack now 0 5 64 118 156 180 160 184 57
Reducing stack by rule 113 (line 672):
   $1 = nterm atom ()
-> $$ = nterm atom_expr ()
Entering state 56
Stack now 0 5 64 118 156 180 160 184 56
Reading a token
Next token is token EQUAL ()
Reducing stack by rule 111 (line 661):
   $1 = nterm atom_expr ()
-> $$ = nterm power ()
Entering state 55
Stack now 0 5 64 118 156 180 160 184 55
Reducing stack by rule 107 (line 647):
   $1 = nterm power ()
-> $$ = nterm factor ()
Entering state 53
Stack now 0 5 64 118 156 180 160 184 53
Reducing stack by rule 99 (line 612):
   $1 = nterm factor ()
-> $$ = nterm term ()
Entering state 52
Stack now 0 5 64 118 156 180 160 184 52
Next token is token EQUAL ()
Reducing stack by rule 96 (line 595):
   $1 = nterm term ()
-> $$ = nterm arith_expr ()
Entering state 51
Stack now 0 5 64 118 156 180 160 184 51
Next token is token EQUAL ()
Reducing stack by rule 94 (line 583):
   $1 = nterm arith_expr ()
-> $$ = nterm shift_expr ()
Entering state 50
Stack now 0 5 64 118 156 180 160 184 50
Next token is token EQUAL ()
Reducing stack by rule 92 (line 571):
   $1 = nterm shift_expr ()
-> $$ = nterm and_expr ()
Entering state 49
Stack now 0 5 64 118 156 180 160 184 49
Next token is token EQUAL ()
Reducing stack by rule 90 (line 560):
   $1 = nterm and_expr ()
-> $$ = nterm xor_expr ()
Entering state 48
Stack now 0 5 64 118 156 180 160 184 48
Next token is token EQUAL ()
Reducing stack by rule 88 (line 549):
   $1 = nterm xor_expr ()
-> $$ = nterm expr ()
Entering state 47
Stack now 0 5 64 118 156 180 160 184 47
Next token is token EQUAL ()
Reducing stack by rule 75 (line 499):
   $1 = nterm expr ()
-> $$ = nterm comparison ()
Entering state 46
Stack now 0 5 64 118 156 180 160 184 46
Reducing stack by rule 74 (line 494):
   $1 = nterm comparison ()
-> $$ = nterm not_test ()
Entering state 45
Stack now 0 5 64 118 156 180 160 184 45
Next token is token EQUAL ()
Reducing stack by rule 69 (line 465):
   $1 = nterm not_test ()
-> $$ = nterm and_test ()
Entering state 43
Stack now 0 5 64 118 156 180 160 184 43
Next token is token EQUAL ()
Reducing stack by rule 65 (line 442):
   $1 = nterm and_test ()
-> $$ = nterm or_test ()
Entering state 41
Stack now 0 5 64 118 156 180 160 184 41
Reducing stack by rule 64 (line 433):
   $1 = nterm or_test ()
-> $$ = nterm test ()
Entering state 40
Stack now 0 5 64 118 156 180 160 184 40
Next token is token EQUAL ()
Shifting token EQUAL ()
Entering state 83
Stack now 0 5 64 118 156 180 160 184 40 83
Reading a token
Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 16
Stack now 0 5 64 118 156 180 160 184 40 83 16
Reducing stack by rule 122 (line 707):
   $1 = token NUMBER ()
-> $$ = nterm atom ()
Entering state 57
Stack now 0 5 64 118 156 180 160 184 40 83 57
Reducing stack by rule 113 (line 672):
   $1 = nterm atom ()
-> $$ = nterm atom_expr ()
Entering state 56
Stack now 0 5 64 118 156 180 160 184 40 83 56
Reading a token
Next token is token PLUS ()
Reducing stack by rule 111 (line 661):
   $1 = nterm atom_expr ()
-> $$ = nterm power ()
Entering state 55
Stack now 0 5 64 118 156 180 160 184 40 83 55
Reducing stack by rule 107 (line 647):
   $1 = nterm power ()
-> $$ = nterm factor ()
Entering state 53
Stack now 0 5 64 118 156 180 160 184 40 83 53
Reducing stack by rule 99 (line 612):
   $1 = nterm factor ()
-> $$ = nterm term ()
Entering state 52
Stack now 0 5 64 118 156 180 160 184 40 83 52
Next token is token PLUS ()
Reducing stack by rule 96 (line 595):
   $1 = nterm term ()
-> $$ = nterm arith_expr ()
Entering state 51
Stack now 0 5 64 118 156 180 160 184 40 83 51
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 102
Stack now 0 5 64 118 156 180 160 184 40 83 51 102
Reading a token
Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 16
Stack now 0 5 64 118 156 180 160 184 40 83 51 102 16
Reducing stack by rule 122 (line 707):
   $1 = token NUMBER ()
-> $$ = nterm atom ()
Entering state 57
Stack now 0 5 64 118 156 180 160 184 40 83 51 102 57
Reducing stack by rule 113 (line 672):
   $1 = nterm atom ()
-> $$ = nterm atom_expr ()
Entering state 56
Stack now 0 5 64 118 156 180 160 184 40 83 51 102 56
Reading a token
Next token is token PLUS ()
Reducing stack by rule 111 (line 661):
   $1 = nterm atom_expr ()
-> $$ = nterm power ()
Entering state 55
Stack now 0 5 64 118 156 180 160 184 40 83 51 102 55
Reducing stack by rule 107 (line 647):
   $1 = nterm power ()
-> $$ = nterm factor ()
Entering state 53
Stack now 0 5 64 118 156 180 160 184 40 83 51 102 53
Reducing stack by rule 99 (line 612):
   $1 = nterm factor ()
-> $$ = nterm term ()
Entering state 143
Stack now 0 5 64 118 156 180 160 184 40 83 51 102 143
Next token is token PLUS ()
Reducing stack by rule 97 (line 599):
   $1 = nterm arith_expr ()
   $2 = token PLUS ()
   $3 = nterm term ()
-> $$ = nterm arith_expr ()
Entering state 51
Stack now 0 5 64 118 156 180 160 184 40 83 51
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 102
Stack now 0 5 64 118 156 180 160 184 40 83 51 102
Reading a token
Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 16
Stack now 0 5 64 118 156 180 160 184 40 83 51 102 16
Reducing stack by rule 122 (line 707):
   $1 = token NUMBER ()
-> $$ = nterm atom ()
Entering state 57
Stack now 0 5 64 118 156 180 160 184 40 83 51 102 57
Reducing stack by rule 113 (line 672):
   $1 = nterm atom ()
-> $$ = nterm atom_expr ()
Entering state 56
Stack now 0 5 64 118 156 180 160 184 40 83 51 102 56
Reading a token
Next token is token NEWLINE ()
Reducing stack by rule 111 (line 661):
   $1 = nterm atom_expr ()
-> $$ = nterm power ()
Entering state 55
Stack now 0 5 64 118 156 180 160 184 40 83 51 102 55
Reducing stack by rule 107 (line 647):
   $1 = nterm power ()
-> $$ = nterm factor ()
Entering state 53
Stack now 0 5 64 118 156 180 160 184 40 83 51 102 53
Reducing stack by rule 99 (line 612):
   $1 = nterm factor ()
-> $$ = nterm term ()
Entering state 143
Stack now 0 5 64 118 156 180 160 184 40 83 51 102 143
Next token is token NEWLINE ()
Reducing stack by rule 97 (line 599):
   $1 = nterm arith_expr ()
   $2 = token PLUS ()
   $3 = nterm term ()
-> $$ = nterm arith_expr ()
Entering state 51
Stack now 0 5 64 118 156 180 160 184 40 83 51
Next token is token NEWLINE ()
Reducing stack by rule 94 (line 583):
   $1 = nterm arith_expr ()
-> $$ = nterm shift_expr ()
Entering state 50
Stack now 0 5 64 118 156 180 160 184 40 83 50
Next token is token NEWLINE ()
Reducing stack by rule 92 (line 571):
   $1 = nterm shift_expr ()
-> $$ = nterm and_expr ()
Entering state 49
Stack now 0 5 64 118 156 180 160 184 40 83 49
Next token is token NEWLINE ()
Reducing stack by rule 90 (line 560):
   $1 = nterm and_expr ()
-> $$ = nterm xor_expr ()
Entering state 48
Stack now 0 5 64 118 156 180 160 184 40 83 48
Next token is token NEWLINE ()
Reducing stack by rule 88 (line 549):
   $1 = nterm xor_expr ()
-> $$ = nterm expr ()
Entering state 47
Stack now 0 5 64 118 156 180 160 184 40 83 47
Next token is token NEWLINE ()
Reducing stack by rule 75 (line 499):
   $1 = nterm expr ()
-> $$ = nterm comparison ()
Entering state 46
Stack now 0 5 64 118 156 180 160 184 40 83 46
Reducing stack by rule 74 (line 494):
   $1 = nterm comparison ()
-> $$ = nterm not_test ()
Entering state 45
Stack now 0 5 64 118 156 180 160 184 40 83 45
Next token is token NEWLINE ()
Reducing stack by rule 69 (line 465):
   $1 = nterm not_test ()
-> $$ = nterm and_test ()
Entering state 43
Stack now 0 5 64 118 156 180 160 184 40 83 43
Next token is token NEWLINE ()
Reducing stack by rule 65 (line 442):
   $1 = nterm and_test ()
-> $$ = nterm or_test ()
Entering state 41
Stack now 0 5 64 118 156 180 160 184 40 83 41
Reducing stack by rule 64 (line 433):
   $1 = nterm or_test ()
-> $$ = nterm test ()
Entering state 132
Stack now 0 5 64 118 156 180 160 184 40 83 132
Next token is token NEWLINE ()
Reducing stack by rule 33 (line 277):
   $1 = nterm test ()
-> $$ = nterm eq_testlist_star_expr_plus ()
Entering state 131
Stack now 0 5 64 118 156 180 160 184 40 83 131
Reducing stack by rule 32 (line 270):
   $1 = nterm test ()
   $2 = token EQUAL ()
   $3 = nterm eq_testlist_star_expr_plus ()
-> $$ = nterm expr_stmt ()
Entering state 30
Stack now 0 5 64 118 156 180 160 184 30
Reducing stack by rule 25 (line 241):
   $1 = nterm expr_stmt ()
-> $$ = nterm small_stmt ()
Entering state 29
Stack now 0 5 64 118 156 180 160 184 29
Reducing stack by rule 23 (line 232):
   $1 = nterm small_stmt ()
-> $$ = nterm small_stmt_list ()
Entering state 28
Stack now 0 5 64 118 156 180 160 184 28
Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 80
Stack now 0 5 64 118 156 180 160 184 28 80
Reducing stack by rule 22 (line 227):
   $1 = nterm small_stmt_list ()
   $2 = token NEWLINE ()
-> $$ = nterm simple_stmt ()
Entering state 27
Stack now 0 5 64 118 156 180 160 184 27
Reducing stack by rule 19 (line 216):
   $1 = nterm simple_stmt ()
-> $$ = nterm stmt ()
Entering state 205
Stack now 0 5 64 118 156 180 160 184 205
Reading a token
Next token is token DEDENT ()
Reducing stack by rule 147 (line 804):
   $1 = nterm stmt ()
-> $$ = nterm stmt_plus ()
Entering state 206
Stack now 0 5 64 118 156 180 160 184 206
Next token is token DEDENT ()
Shifting token DEDENT ()
Entering state 222
Stack now 0 5 64 118 156 180 160 184 206 222
Reducing stack by rule 59 (line 403):
   $1 = token NEWLINE ()
   $2 = token INDENT ()
   $3 = nterm stmt_plus ()
   $4 = token DEDENT ()
-> $$ = nterm suite ()
Entering state 201
Stack now 0 5 64 118 156 180 201
Reading a token
Now at end of input.
Reducing stack by rule 54 (line 373):
   $1 = token WHILE ()
   $2 = nterm M ()
   $3 = nterm test ()
   $4 = token COLON ()
   $5 = nterm M ()
   $6 = nterm suite ()
-> $$ = nterm while_stmt ()
Entering state 38
Stack now 0 38
Reducing stack by rule 47 (line 338):
   $1 = nterm while_stmt ()
-> $$ = nterm compound_stmt ()
Entering state 36
Stack now 0 36
Reducing stack by rule 20 (line 219):
   $1 = nterm compound_stmt ()
-> $$ = nterm stmt ()
Entering state 26
Stack now 0 26
Now at end of input.
Reducing stack by rule 5 (line 155):
   $1 = nterm stmt ()
-> $$ = nterm snippet ()
Entering state 24
Stack now 0 24
Reducing stack by rule 3 (line 146):
   $1 = nterm snippet ()
-> $$ = nterm file ()
Entering state 23
Stack now 0 23
Now at end of input.
Shifting token "end of file" ()
Entering state 78
Stack now 0 23 78
Stack now 0 23 78
Cleanup: popping token "end of file" ()
Cleanup: popping nterm file ()
